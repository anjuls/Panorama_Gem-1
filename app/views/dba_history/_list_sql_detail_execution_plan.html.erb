<%= "No execution plan found" if @multiplans.count == 0 %>
<% @multiplans.each do |mp|
     @plans = mp[:plans]
%>


<%

   def avg_read_bytes(rec)
     fn(rec.read_io_bytes/rec.read_io_requests) if rec.read_io_bytes && rec.read_io_requests && rec.read_io_requests > 0
   end

   def avg_write_bytes(rec)
     fn(rec.write_io_bytes/rec.write_io_requests) if rec.write_io_bytes && rec.write_io_requests && rec.write_io_requests > 0
   end

   def field_style(rec)
     return "background-color:red;"     if rec.version_red_count    < @multiplans.count
     return "background-color:orange;"  if rec.version_orange_count < @multiplans.count
   end

  column_options =
    [
      {:caption=>"Operation",   :data=>proc{|rec| tab = ""; rec.depth.downto(2) {tab += " |&nbsp;"}; "<span style=\"color: lightgray;\">#{tab}</span>#{rec.operation} #{rec.options}".html_safe}, :no_wrap=>true, :title=>"Art des Zugriffs"},
      {:caption=>"ID",          :data=>proc{|rec| rec.id },  :align=>:right,                    :title=>"ID der Operation",             :data_title=>proc{|rec| "Parent_ID=#{rec.parent_id}"} },
      {:caption=>"R.",          :data=>proc{|rec| rec.execorder },  :align=>:right,             :title=>"Reihenfolge der Operation",    :data_title=>proc{|rec| "ID=#{rec.id}, Parent_ID=#{rec.parent_id}"} },
      {:caption=>"Object-name", :data=>proc{|rec| "#{rec.object_owner}.#{rec.object_name}" },   :title=>"Name des Objekts",             :data_title=>proc{|rec| "Type=#{rec.object_type}"} },
      {:caption=>"Rows",        :data=>proc{|rec| fn(rec.num_rows) },                           :title=>"Number of rows of object",     :align=>:right },
      {:caption=>"MB",          :data=>proc{|rec| fn(rec.mbytes) },                             :title=>"Size of object in MBytes",     :align=>:right },
      {:caption=>"Cost",        :data=>proc{|rec| fn(rec.cost) },                               :title=>"Costs calculated by optimizer + additional optimizer calculations", :align=>:right, :data_title=>proc{|rec| "Costs, cardinality=#{rec.cardinality}, bytes=#{rec.bytes}, time=#{rec.time}, Partition_Start=#{rec.partition_start}, Partition_Stop=#{rec.partition_stop}, Partition_ID=#{rec.partition_id}"} },
      {:caption=>"Parallel",    :data=>proc{|rec| rec.other_tag },                              :title=>"Parallelisierung (Other_Tag)" },
      {:caption=>"Access",      :data=>proc{|rec| rec.access_predicates },                      :title=>"Zugrifskriterium auf Objekt", :style=>"max-width:300px; word-wrap: break-word;" },
      {:caption=>"Filter",      :data=>proc{|rec| rec.filter_predicates },                      :title=>"Filterkriterium für Objekt",  :style=>"max-width:300px; word-wrap: break-word;" },
      {:caption=>"Temp",        :data=>proc{|rec| rec.temp_space },                             :title=>"Temp-Space prognostiziert" },
      {:caption=>"Dist",        :data=>proc{|rec| rec.distribution },                           :title=>"PQ-Distribution-Strategie" },
    ]
  column_options <<  {:caption=>"DB time",     :data=>proc{|rec| show_percentage(rec.db_time_seconds, @sum_db_time_seconds) }, :align=>:right, :data_title=>proc{|rec| "DB-time: #{fn(rec.db_time_seconds)} seconds" }, :title=>"Percentage of total DB-time in % (from active session history / ASH)" } if session[:database].version >= "11.2"
  column_options <<  {:caption=>"CPU",         :data=>proc{|rec| show_percentage(rec.cpu_seconds, @sum_cpu_seconds)  },        :align=>:right, :data_title=>proc{|rec| "CPU: #{fn(rec.cpu_seconds)} seconds" }, :title=>"Percentage of CPU usage in % (from active session history / ASH). Part of DB-time." } if session[:database].version >= "11.2"
  column_options <<  {:caption=>"Waits",       :data=>proc{|rec| show_percentage(rec.waiting_seconds, @sum_waiting_seconds)  },:align=>:right, :data_title=>proc{|rec| "Waiting: #{fn(rec.waiting_seconds)} seconds" }, :title=>"Percentage of wait events % (from active session history / ASH). Part of DB-time." } if session[:database].version >= "11.2"
  column_options <<  {:caption=>"I/O",         :data=>proc{|rec| show_percentage(rec.io_requests, @sum_io_requests)},          :align=>:right, :data_title=>proc{|rec| "IO-Requests: #{fn(rec.read_io_requests)} reads, #{fn(rec.write_io_requests)} writes, avg.read=#{avg_read_bytes(rec)} bytes, avg.write=#{avg_write_bytes(rec)} bytes" }, :title=>"Percentage of  I/O-Requests in % (from active session history / ASH)" } if session[:database].version >= "11.2"
  column_options <<  {:caption=>"IC",          :data=>proc{|rec| show_percentage(rec.interconnect_io_bytes, @sum_interconnect_io_bytes)}, :align=>:right, :data_title=>proc{|rec| "Interconnect IO (kBytes): #{fn(rec.interconnect_io_bytes ? rec.interconnect_io_bytes/1024 : nil)}" }, :title=>"Percentage of  Interconnect-I/O in % (from active session history / ASH)" } if session[:database].version >= "11.2"

  column_options.each do |c|
    c[:data_style] = proc{|rec| field_style(rec) }  # Einzelrecords der Ausfuehrungspläne nicht identisch
  end

  if session[:database].version >= "11.2"
    @sum_io_requests = 0
    @sum_interconnect_io_bytes = 0
    @sum_cpu_seconds = 0                             # Anzahl der Samples
    @sum_waiting_seconds = 0                         # Anzahl der Samples
    @sum_db_time_seconds = 0
    @min_sample_time     = nil
    @plans.each do |p|
      @sum_io_requests           += p.io_requests             if p.io_requests
      @sum_interconnect_io_bytes += p.interconnect_io_bytes   if p.interconnect_io_bytes
      @sum_cpu_seconds           += p.cpu_seconds             if p.cpu_seconds
      @sum_waiting_seconds       += p.waiting_seconds         if p.waiting_seconds
      @sum_db_time_seconds       += p.db_time_seconds         if p.db_time_seconds
      @min_sample_time           =  p.min_sample_time         if @min_sample_time.nil? || p.min_sample_time && p.min_sample_time < @min_sample_time  # Kleinste Aufzeichnung eines Samples
    end
  end

  @caption =  "Explain Plan: Plan_Hash_Value=#{mp.plan_hash_value}, Optimizer-Mode=#{@plans[0] ? @plans[0].optimizer : "[Unknown]"}, Optimizer_Env_Hash_Value=#{mp.optimizer_env_hash_value}"
  if @multiplans.length > 1
    @caption << "<br/>Gültig von #{localeDateTime(mp.first_occurrence)} bis #{localeDateTime(mp.last_occurrence)}<br/>"
    @caption << "#{mp.executions} Executions, #{formattedNumber(mp.secs_per_execution,6)} Sekunden Elapsed / Execution"
  end
%>

    <%= gen_slickgrid(@plans, column_options, {
            :caption =>@caption.html_safe,
            :width=>:auto,
            :line_height_single => true
            #:max_height=>800
    }) %>

<% end %>