<%

@update_area = get_unique_area_id

def link_column_stmt(rec, value)
  my_ajax_link_to(value,
                url_for(:action => "list_segment_stat_hist_sql",
                        :owner          => rec.owner,
                        :object_name    => rec.object_name,
                        :subobject_name => rec.subobject_name,
                        :instance       => rec.instance_number,
                        :time_selection_start => @time_selection_start,
                        :time_selection_end   => @time_selection_end,
                        :update_area    => @update_area
                        ),
                :title => t(:dba_history_list_segment_stat_historic_sum_link_sql_hint, :default=>"show SQLs of time range from DBA_Hist_SQLStat with usage of object in explain plan")
)
end

def link_column_snap(rec, value)
  my_ajax_link_to(value,
                url_for(:action => "list_segment_stat_hist_detail",
                        :owner          => rec.owner,
                        :object_name    => rec.object_name,
                        :subobject_name => rec.subobject_name,
                        :instance       => rec.instance_number,
                        :time_selection_start => @time_selection_start,
                        :time_selection_end   => @time_selection_end,
                        :min_snap_id    => rec.min_snap_id,
                        :max_snap_id    => rec.max_snap_id,
                        :update_area    => @update_area
                       ),
                :title => "Anzeige der einzelnen Snaphots zum Objekt"
  )
end

def link_column_wait(rec, value)
  if rec.nvl_object_id      # Es wurde kein Object identifiziert, nur hisgtorische Object_ID geliefert
    value_filter = { :sql => "s.Current_Obj_No = ?", :bind_value => rec.nvl_object_id }
  else
    if rec.subobject_name
      value_filter = { :sql => "LOWER(o.Owner)||'.'||o.Object_Name||'.'||o.SubObject_Name = ?", :bind_value => "#{rec.owner.downcase}.#{rec.object_name}.#{rec.subobject_name}" }
    else
      value_filter = { :sql => "LOWER(o.Owner)||'.'||o.Object_Name = ?", :bind_value => "#{rec.owner.downcase}.#{rec.object_name}" }
    end
  end


  my_ajax_link_to(value,
                url_for(:controller     => :active_session_history,
                        :action         => :list_session_statistic_historic_grouping,
                        :groupfilter    => {
                                :DBID                   => {:sql => "s.DBID = ?"            , :bind_value => session[:database].dbid, :hide_filter => true},
                                :Instance               => {:sql => "s.Instance_Number = ?" , :bind_value => rec.instance_number},
                                :time_selection_start   => {:sql => "s.Sample_Time >= TO_TIMESTAMP(?, '#{sql_datetime_minute_mask}')"    , :bind_value => @time_selection_start},
                                :time_selection_end     => {:sql => "s.Sample_Time <  TO_TIMESTAMP(?, '#{sql_datetime_minute_mask}')"    , :bind_value => @time_selection_end},
                                :Min_Snap_ID            => {:sql => "s.snap_id >= ?"        , :bind_value => rec.min_snap_id, :hide_filter => true},
                                :Max_Snap_ID            => {:sql => "s.snap_id <= ?"        , :bind_value => rec.max_snap_id, :hide_filter => true},
                                :Idle_Wait1             => {:sql => "NVL(s.Event, s.Session_State) != ?", :bind_value => "PX Deq Credit: send blkd", :hide_filter=>true},
                                 "DB-Object"            => value_filter
                        },
                        :groupby        => "DB-Object",
                        :update_area    => @update_area
                       ),
                :title => t(:dba_history_list_segment_stat_historic_sum_link_wait_hint, :default=>"deeper details on incurred wait times of object")
  )
end

column_options =
  [
    {:caption=>"I",          :data=>proc{|rec| rec.instance_number},                                                      :title=>"RAC-Instance"},
    {:caption=>"Object",     :data=>proc{|rec| link_table_structure(@update_area, rec.owner, rec.object_name, "#{rec.owner} . #{rec.object_name} #{rec.subobject_name ? "(#{rec.subobject_name})" : ""}")},  :title=>"Object-Owner, Name, Partition-Name (optional)", :data_title=>proc{|rec| "Type=#{rec.object_type}"} },
    {:caption=>"SQLs",       :data=>proc{|rec| link_column_stmt(rec, fn(rec.sql_ids))},                                   :align=>:right, :title=>t(:dba_history_list_segment_stat_historic_sum_sqls_hint, :default =>"Total number of SQLs for this object in whole AWR history regardless of considered time range")},
    {:caption=>"Num Rows",   :data=>proc{|rec| formattedNumber(rec.num_rows)},                                            :align=>:right, :title=>"Anzahl Records des Objektes (aus Statistik)"},
    {:caption=>"MBytes",     :data=>proc{|rec| formattedNumber(rec.mbytes,2)},                                            :align=>:right, :title=>"Größe des Objektes in MByte",     :show_pct_hint=>proc{|rec| rec.mbytes}},
    {:caption=>"Time waited",:data=>proc{|rec| link_column_wait(rec, formattedNumber(rec.time_waited_secs))},             :align=>:right, :title=>"Time waited in secs.",            :show_pct_hint=>proc{|rec| rec.time_waited_secs}},
    {:caption=>"Avg. Time waited",:data=>proc{|rec| link_column_wait(rec, formattedNumber(rec.time_waited_avg_ms,2))},    :align=>:right, :title=>"Average time waited per event in millisecs."},
    {:caption=>"Log.Rd.",    :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.logical_reads_delta))},          :align=>:right, :title=>"Logical Reads",       :show_pct_hint=>proc{|rec| rec.logical_reads_delta}},
    {:caption=>"BBW",        :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.buffer_busy_waits_delta))},      :align=>:right, :title=>"Buffer Busy Waits",   :show_pct_hint=>proc{|rec| rec.buffer_busy_waits_delta}},
    {:caption=>"Bl.Chg.",    :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.db_block_changes_delta))},       :align=>:right, :title=>"DB Block Changes",    :show_pct_hint=>proc{|rec| rec.db_block_changes_delta} },
    {:caption=>"Ph.Rd.nd.",  :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.physical_reads_delta-rec.physical_reads_direct_delta))},   :align=>:right,  :title=>"Physical Reads Non-Direct", :show_pct_hint=>proc{|rec| rec.physical_reads_delta-rec.physical_reads_direct_delta}},
    {:caption=>"Ph.Wr.",     :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.physical_writes_delta))},        :align=>:right, :title=>"Physical Writes",     :show_pct_hint=>proc{|rec| rec.physical_writes_delta}},
    {:caption=>"Ph.Rd.dir.", :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.physical_reads_direct_delta))},  :align=>:right, :title=>"Physical Reads Direct",:show_pct_hint=>proc{|rec| rec.physical_reads_direct_delta}},
    {:caption=>"Ph.Wr.dir.", :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.physical_writes_direct_delta))}, :align=>:right, :title=>"Physical Writes Direct",:show_pct_hint=>proc{|rec| rec.physical_writes_direct_delta}},
    {:caption=>"ITL",        :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.itl_waits_delta))},              :align=>:right, :title=>"ITL Waits",           :show_pct_hint=>proc{|rec| rec.itl_waits_delta}},
    {:caption=>"RL",         :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.row_lock_waits_delta))},         :align=>:right, :title=>"Row Lock Waits",      :show_pct_hint=>proc{|rec| rec.row_lock_waits_delta}},
    {:caption=>"GC BBW",     :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.gc_buffer_busy_delta))},         :align=>:right, :title=>"GC Buffer Busy waits",:show_pct_hint=>proc{|rec| rec.gc_buffer_busy_delta}},
    {:caption=>"CR BR",      :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.gc_cr_blocks_received_delta))},  :align=>:right, :title=>"GC CR Blocks Received",:show_pct_hint=>proc{|rec| rec.gc_cr_blocks_received_delta}},
    {:caption=>"CU BR",      :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.gc_cu_blocks_received_delta))},  :align=>:right, :title=>"GC CU Blocks Received",:show_pct_hint=>proc{|rec| rec.gc_cu_blocks_received_delta}},
    {:caption=>"Sp.Us.",     :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.space_used_delta))},             :align=>:right, :title=>"Space Used",          :show_pct_hint=>proc{|rec| rec.logical_reads_delta}},
    {:caption=>"Sp.Al.",     :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.space_allocated_delta))},        :align=>:right, :title=>"Space Allocated",     :show_pct_hint=>proc{|rec| rec.space_allocated_delta}},
    {:caption=>"Tbl.Sc.",    :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.table_scans_delta))},            :align=>:right, :title=>"Table scans",         :show_pct_hint=>proc{|rec| rec.table_scans_delta}},
  ]

%>

<%= gen_slickgrid(@segment_sums, column_options, {
        :max_height => 450,
        :caption => "Daten aus DBA_Hist_Seg_stat, Inst_ID=#{@instance}, Von #{@time_selection_start} bis #{@time_selection_end}"

}) %>

<div id="<%= @update_area %>" style="clear: both;">
</div>

