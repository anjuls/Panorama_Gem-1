<!-- Vom Aufrufer zu belegen: @header, @groupfilter, @last_action, @repeat_action,

    optional: @group_filter_addition, @group_filter_addition_header
     Auch benutzt durch IoController
-->

<%
%>

<%
   @time_selection_start_id = "time_selection_start_#{session[:request_counter]}"
   @time_selection_end_id   = "time_selection_end_#{session[:request_counter]}"

   def strip_groupfilter                                                        # Groupfilter reduzieren um problematische Filter
     groupfilter = @groupfilter.clone
     groupfilter.delete("Min_Snap_ID")                                         # Da sich anndere Kriterien geändert haben, kann diese Grenze nicht mehr stimmen
     groupfilter.delete("Max_Snap_ID")                                         # Da sich anndere Kriterien geändert haben, kann diese Grenze nicht mehr stimmen
     groupfilter
   end

    @caption = ""
    @caption << (my_ajax_form_tag url_for(:controller => :active_session_history, :action        => :refresh_time_selection,
                                :groupby       => @groupby,                     # Gruppierungskriterium für einen Dialog
                                :groupfilter   => strip_groupfilter,            # Groupfilter des letzten Aufrufes wiederverwenden, reduziert um Fehlerquellen
                                :update_area   => params[:update_area],         # Update_area des letzten Aufrufes wiederverwenden
                                :repeat_action => @repeat_action             # Zuletzt aufgerufene action wiederholen
                        ) do
        form_content = ""
        form_content << "<div style=\"float:left;\">"
        form_content << @header
        form_content << "&nbsp;"
        form_content << "</div><div style=\"float:left;\">"
        form_content << "<table>"
        form_content << "<tr>"
        @groupfilter.each do|key,value|
            form_content << "<th>#{key}</th>".html_safe if !groupfilter_value(key)[:hide_content] &&  key != "time_selection_start" && key != "time_selection_end"
        end
        form_content << "<th>Start time</th>"
        form_content << "<th>End time</th>"
        if @group_filter_addition
          form_content << "<th>"
          form_content << @group_filter_addition_header
          form_content << "</th>"
        end

        form_content << "<th></th></tr><tr>"
        @groupfilter.each do|key,value|
            if !groupfilter_value(key)[:hide_content] &&  key != "time_selection_start" && key != "time_selection_end"
                input_id = get_unique_area_id
                form_content << "<td>"
                form_content << text_field_tag(key, value, {:id=>input_id, :size=>value.length+4, :title => "Hugo"})
                #form_content << "#{value}".html_safe
                #form_content << submit_tag("x", :name=>key, :title => t(:active_session_history_list_groupfilter_delete_filter_hint, :default=>"Refresh content without this filter"), :style=>"color:red")
                form_content << submit_tag("x", {:onclick => "jQuery('##{input_id}').val('');", :title => t(:active_session_history_list_groupfilter_delete_filter_hint, :default=>"Refresh content without this filter"), :style=>"color:red" })
                form_content << "</td>"
            end
        end
        form_content << "<td>"
        form_content << text_field_tag(:time_selection_start, @groupfilter["time_selection_start"], :size=>15, :id=>@time_selection_start_id, :title => "#{t(:time_selection_start_hint, :default=>'Start of considered time range in format')} '#{human_datetime_minute_mask}'")
        form_content << "</td><td>"
        form_content << text_field_tag(:time_selection_end,   @groupfilter["time_selection_end"]  , :size=>15, :id=>@time_selection_end_id,   :title => "#{t(:time_selection_start_hint, :default=>'Start of considered time range in format')} '#{human_datetime_minute_mask}'")
        form_content << "</td><td>"

        if @group_filter_addition
          form_content << @group_filter_addition
          form_content << "</td><td>"
        end

        form_content << submit_tag("Refresh", :title => t(:active_session_history_list_groupfilter_refresh_hint, :default=>"Refresh content with changed parameters"))
        form_content << "</td>"

        form_content << "</tr>"
        form_content << "</table>"
        form_content << "</div>"
        form_content << "<div style=\"clear: both;\"></div>"           # Umbruch ermöglichen, damit Grid nicht rechts angefügt wird
        form_content.html_safe
    end)

   # TODO: Scrollwidth der Inputs testen und Breite erweitern solange Scroll existiert
%>



