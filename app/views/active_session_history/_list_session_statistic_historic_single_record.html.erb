<% # Parameter f체r nachfolgendes Partial list_groupfilter
   @header = "Einzel-Events f체r: "
   @repeat_action = :list_session_statistic_historic_single_record
%>


<%= render :partial => 'list_groupfilter' %>

<%
   @update_area = get_unique_area_id

def link_column_sql_id(rec)
  retval = link_historic_sql_id(rec.instance_number, rec.sql_id, @groupfilter[:time_selection_start], @groupfilter[:time_selection_end], @update_area, rec.username)
  if rec["top_level_sql_id"] && rec.top_level_sql_id != nil && rec.top_level_sql_id != rec.sql_id
    retval << " "
    retval << link_historic_sql_id(rec.instance_number, rec.top_level_sql_id, @groupfilter[:time_selection_start], @groupfilter[:time_selection_end], @update_area, rec.username)
  end
  retval
end

def link_column_object(rec)
  update_area = "list_session_statistic_single_record_convert_rowid_#{rec.row_num}"
  unless rec["current_row_no"]  # vor Oracle 11.2
    ""
  else
    my_ajax_link_to("File#=#{rec.current_file_no}, Block#=#{rec.current_block_no}, Row#=#{rec.current_row_no}#{", Remote-Instance=#{rec.remote_instance_no}" if rec.remote_instance_no}",
                      url_for(:controller       => :dba,
                              :action           => :convert_to_rowid,
                              :update_area      => update_area,
                              :waitingforobject => "#{rec.owner}.#{rec.object_name}",
                              :data_object_id   => rec.data_object_id,
                              :row_wait_file_no => rec.current_file_no,
                              :row_wait_block_no => rec.current_block_no,
                              :row_wait_row_no  => rec.current_row_no
                      ),
                      :title=>t(:dba_list_dml_locks_link_column_blocking_object_hint, :default=>"Determine associated rowid")
         )+"<div id=\"#{update_area}\"></div>".html_safe
  end
end

def show_modus(rec)
  rec.modus[2,300] if rec.modus
end

# Ermitteln Hint f체r Module, wenn Application
def module_hint(moduletext)
  explain_application_info(moduletext)[:short_info]
rescue Exception=>e                                                             # falls keine gueltige Application gefunden wird
  e.message
end


column_options =
  [
    {:caption=>"I",                :data=>proc{|rec| rec.instance_number },                     :title=>"RAC-Instance"},
    {:caption=>"Sample-Time",      :data=>proc{|rec| localeDateTime(rec.sample_time)},          :title=>"Zeitpunkt des Sample", :data_title=>'Zeitpunkt des Sample, Sample_ID=#{rec.sample_id}', :plot_master_time=>true },
    {:caption=>"SID",              :data=>proc{|rec| rec.session_id},                           :title=>"Session-ID",           :data_title=>'Session-ID, SerialNo=#{rec.session_serial_no}, Type=#{rec.session_type}'},
    {:caption=>"User",             :data=>proc{|rec| rec.username},                             :title=>"User-Name", :data_title=>proc{|rec| "%t: User_ID=#{rec.user_id}"}},
    {:caption=>"QC",               :data=>proc{|rec| "#{rec.qc_instance_id}:#{rec.qc_session_id}" if rec.qc_instance_id},  :title=>"Query-coordinator instance and session-id (if parallel query is used)"},
    {:caption=>"SQL-ID",           :data=>proc{|rec| link_column_sql_id(rec) },       :title=>t(:active_session_history_list_session_statistic_historic_single_record_sql_id_title, :default=>"SQL-ID of current statement + optional SQL-ID of top level SQL"), :data_title=>proc{|rec| "SQL-ID, Child-No=#{rec.sql_child_number}, Plan-Hash-Value=#{rec.sql_plan_hash_value}#{ " Current=#{rec.is_sqlid_current}" if rec["is_sqlid_current"]} " } },
    {:caption=>"O",                :data=>proc{|rec| rec.sql_opcode},                           :title=>"SQL-Opcode", :data_title=>'SQL-Operation=#{rec.sql_operation}'},
  ]
  column_options <<  {:caption=>"Exec.", :data=>proc{|rec| "ID=#{rec.sql_exec_id} #{localeDateTime(rec.sql_exec_start)}"},  :title=>"SQL Execution-ID, Start of Execution"}                     if session[:database].version >= "11.2"
  column_options <<  {:caption=>"Operation", :data=>proc{|rec| "Line=#{rec.sql_plan_line_id} #{rec.sql_plan_operation} #{rec.sql_plan_options}"}, :title=>"Operation in execution plan line"}   if session[:database].version >= "11.2"
  column_options <<  {:caption=>"Block",            :data=>proc{|rec| "#{rec["blocking_inst_id"] ? "#{rec.blocking_inst_id}:" : ""}#{rec.blocking_session ? rec.blocking_session : (rec.blocking_session_status=="NO HOLDER" ? "" : rec.blocking_session_status )}"}, :title=>"Blocking session SID, GLOBAL=blocked from other RAC-instance", :data_title=>'Blocking Session SID, Blocking Session-Status=#{rec.blocking_session_status}, Blocking Session SerialNo=#{rec.blocking_session_serial_no}'}
  column_options <<  {:caption=>"Event",            :data=>proc{|rec| rec.event ? rec.event : rec.session_state },      :title=>"Wait-Event w채hrend Sample", :data_title=>proc{|rec| "%t, Event-ID=#{rec.event_id}, Wait-Class=#{rec.wait_class} Sequence=#{rec.sequence} #{explain_wait_event(rec.event)}"} }
  column_options <<  {:caption=>"Parameter",        :data=>proc{|rec| link_wait_params(rec.instance_number, rec.event, rec.p1, rec.p1text, nil, rec.p2, rec.p2text, nil, rec.p3, rec.p3text, nil, "list_session_statistics_wait_info_#{rec.sample_id}#{rec.instance_number}_#{rec.session_id}") },:title=>"Parameter des Wait-Event"}
  column_options <<  {:caption=>"Wait-Time",        :data=>proc{|rec| formattedNumber(rec.wait_time/1000.0,2) },        :title=>"Total wait time in milliseconds for the event for which the session last waited (0 if currently waiting)", :align=>"right"}
  column_options <<  {:caption=>"Time waited",      :data=>proc{|rec| formattedNumber(rec.time_waited/1000.0,2)},       :title=>"Time in milliseconds that the current session actually spent waiting for the event. This column is set for waits that were in progress at the time the sample was taken.", :align=>"right"}
  column_options <<  {:caption=>"CPU-Time",         :data=>proc{|rec| formattedNumber(rec.tm_delta_cpu_time_ms)},       :title=>"Amount of time in milliseconds this session spent on CPU", :data_title=>proc{|rec| "%t over the last #{formattedNumber(rec.tm_delta_time_secs, 1)} seconds"}, :align=>:right}        if session[:database].version >= "11.2"
  column_options <<  {:caption=>"DB-Time",          :data=>proc{|rec| formattedNumber(rec.tm_delta_db_time_ms)},        :title=>"Amount of time in milliseconds this session spent in database calls", :data_title=>proc{|rec| "%t over the last #{formattedNumber(rec.tm_delta_time_secs, 1)} seconds"}, :align=>:right}        if session[:database].version >= "11.2"
  column_options <<  {:caption=>"Rd. Rq.",          :data=>proc{|rec| formattedNumber(rec.delta_read_io_requests)},     :title=>"Number of read I/O requests made by this session",     :data_title=>proc{|rec| "%t over the last #{formattedNumber(rec.delta_time_secs, 1)} seconds"}, :align=>:right}        if session[:database].version >= "11.2"
  column_options <<  {:caption=>"Wr. Rq.",          :data=>proc{|rec| formattedNumber(rec.delta_write_io_requests)},    :title=>"Number of write I/O requests made by this session",    :data_title=>proc{|rec| "%t over the last #{formattedNumber(rec.delta_time_secs, 1)} seconds"}, :align=>:right}       if session[:database].version >= "11.2"
  column_options <<  {:caption=>"Rd. kB.",          :data=>proc{|rec| formattedNumber(rec.delta_read_io_kbytes)},       :title=>"Number of I/O kbytes read by this session",            :data_title=>proc{|rec| "%t over the last #{formattedNumber(rec.delta_time_secs, 1)} seconds"}, :align=>:right}                if session[:database].version >= "11.2"
  column_options <<  {:caption=>"Wr. kB.",          :data=>proc{|rec| formattedNumber(rec.delta_write_io_kbytes)},      :title=>"Number of I/O kbytes written by this session",         :data_title=>proc{|rec| "%t over the last #{formattedNumber(rec.delta_time_secs, 1)} seconds"}, :align=>:right}             if session[:database].version >= "11.2"
  column_options <<  {:caption=>"IC. kB.",          :data=>proc{|rec| formattedNumber(rec.delta_interconnect_io_kbytes)}, :title=>"Number of I/O kbytes sent over I/O interconnect",    :data_title=>proc{|rec| "%t over the last #{formattedNumber(rec.delta_time_secs, 1)} seconds"}, :align=>:right}         if session[:database].version >= "11.2"
  column_options <<  {:caption=>"DB-Object",        :data=>proc{|rec|"#{rec.owner}. #{rec.object_name}#{rec.subobject_name ? " (#{rec.subobject_name}) #{link_column_object(rec)}" : ""}" if rec.object_name},        :title=>"Aktuell referenziertes Objekt aus gv$Session.Row_Wait_Obj#. Wenn p2Text='object#', dann wird diese genutzt anstatt row_wait_obj#. Achtung: Kann auch Objekt der vorherigen Aktion enthalten", :data_title=>proc{|rec| "Currently referenced object, File=#{rec.current_file_no} (#{rec.file_name} TS=#{rec.tablespace_name}), Block=#{rec.current_block_no} #{", Remote-Instance=#{rec.remote_instance_no}" if rec["remote_instance_no"]}"} }
  column_options <<  {:caption=>"PL / SQL",         :data=>proc{|rec| "#{rec.peo_object_type} #{rec.peo_owner}. #{rec.peo_object_name}. #{rec.peo_procedure_name}" if rec.peo_object_name}, :title=>"PL/SQL: Einstiegs- und aktuelles Objekt", :data_title=>proc{|rec| "Einstieg mit PLSQL-Object, Aktuelles PL/SQL: #{rec.po_object_type} #{rec.po_owner}.#{rec.po_object_name}.#{rec.po_procedure_name}"} }
  column_options <<  {:caption=>"Tx.ID",            :data=>proc{|rec| rec.xid},                                         :title=>"Transaction ID that the session was working on at the time of sampling"}
  column_options <<  {:caption=>"Mode",             :data=>proc{|rec| show_modus(rec)},                                 :title=>"Mode in which session is executed"}                                             if session[:database].version >= "11.2"
  column_options <<  {:caption=>"Program",          :data=>proc{|rec| rec.program },                                    :title=>"Programm"}                                                                      if session[:database].version < "11.2"
  column_options <<  {:caption=>"Program / Machine",:data=>proc{|rec| "#{rec.program}, #{rec.machine}: #{rec.port}" },  :title=>"Programm and machine and port on client"}                         if session[:database].version >= "11.2"
  column_options <<  {:caption=>"Module",           :data=>proc{|rec| rec.module},                                      :title=>"Module falls belegt", :data_title=>proc{|rec| "Module: #{module_hint(rec.module)}"} }
  column_options <<  {:caption=>"Action",           :data=>proc{|rec| rec.action},                                      :title=>"Action falls belegt", :data_title=>proc{|rec| "Action: #{module_hint(rec.action)}"} }
  column_options <<  {:caption=>"Client-ID",        :data=>proc{|rec| rec.client_id},                                   :title=>"Client-ID falls belegt"}
  column_options <<  {:caption=>"Service",          :data=>proc{|rec| rec.service_name},                                :title=>"SQL*Net-Service"}
  column_options <<  {:caption=>"PGA (kByte)",      :data=>proc{|rec| formattedNumber(rec.pga_allocated/1024) if rec.pga_allocated},  :title=>"Amount of PGA memory (in kBytes) consumed by this session at the time the sample was taken", :align=>:right}         if session[:database].version >= "11.2"
  column_options <<  {:caption=>"Temp (kByte)",     :data=>proc{|rec| formattedNumber(rec.temp_space_allocated/1024) if rec.temp_space_allocated},  :title=>"Amount of TEMP memory (in kBytes) consumed by this session at the time the sample was taken", :align=>:right} if session[:database].version >= "11.2"

%>

<%= gen_slickgrid(@sessions, column_options, {
        :caption        => @caption,
        :max_height     => 450
}) %>

<div id="<%= @update_area %>" style="float:left; width:100%;">
</div>

